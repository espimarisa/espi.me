/**
 * @file Configuration file for Eleventy.
 * @see https://www.11ty.dev/docs/config/
 * @license zlib
 */

// @ts-check

import { feedPlugin } from "@11ty/eleventy-plugin-rss";
import pluginSyntaxHighlight from "@11ty/eleventy-plugin-syntaxhighlight";
import pluginSass from "@11tyrocks/eleventy-plugin-sass-lightningcss";
import pluginExternalLinks from "@aloskutov/eleventy-plugin-external-links";
import { compress } from "eleventy-plugin-compress";
import pluginFavicons from "eleventy-plugin-gen-favicons";
import htmlMinifierNext from "html-minifier-next";
import site from "./src/_data/site.js";

/**
 * Configures Eleventy.
 * @param {(import("@11ty/eleventy/UserConfig").default)} eleventyConfig
 * @see https://www.11ty.dev/docs/config/
 */

export default function (eleventyConfig) {
	// Configures data, input, and output directories.
	eleventyConfig.setInputDirectory("./src");
	eleventyConfig.setOutputDirectory("./_site");
	eleventyConfig.setDataDirectory("_data");
	eleventyConfig.setIncludesDirectory("_includes");
	eleventyConfig.setLayoutsDirectory("_layouts");

	// Copies CNAME, static files, and webfonts to output directories.
	eleventyConfig.addPassthroughCopy("CNAME");
	eleventyConfig.addPassthroughCopy({ "./public": "/" });
	eleventyConfig.addPassthroughCopy({
		"node_modules/@fontsource/**/*/files/**/*.woff2": "/fonts",
	});

	// Configures the Nunjucks engine.
	eleventyConfig.setNunjucksEnvironmentOptions({
		lstripBlocks: true,
		throwOnUndefined: true,
		trimBlocks: true,
	});

	// Enables SASS support.
	eleventyConfig.addPlugin(pluginSass);

	// Enables syntax highlighting support.
	eleventyConfig.addPlugin(pluginSyntaxHighlight);

	// Enables brotli compression.
	eleventyConfig.addPlugin(compress, {
		algorithm: "brotli",
		enabled: true,
	});

	// Automatically appends link attributes to external links.
	eleventyConfig.addPlugin(pluginExternalLinks, { url: site.url });

	// Automatically generates favicons and webmanifest details.
	eleventyConfig.addPlugin(pluginFavicons, {
		manifestData: {
			name: site.title,
			theme_color: site.theme_color,
		},
	});

	// Automatically generates RSS feeds.
	eleventyConfig.addPlugin(feedPlugin, {
		collection: {
			limit: 10,
			name: "posts",
		},
		metadata: {
			author: {
				email: site.author.email,
				name: site.author.name,
			},
			base: site.url,
			language: "en",
			subtitle: site.journal.subtitle,
			title: site.journal.title,
		},
		outputPath: "/feed.xml",
		type: "atom",
	});

	// Minifies HTML contents.
	eleventyConfig.addTransform("htmlMinifierNext", function (content) {
		// Only minify pages processed as HTML templates.
		if (this.page.outputPath.endsWith("html")) {
			return htmlMinifierNext.minify(content, {
				collapseBooleanAttributes: true,
				collapseInlineTagWhitespace: true,
				collapseWhitespace: true,
				conservativeCollapse: true,
				decodeEntities: true,
				includeAutoGeneratedTags: false,
				minifyCSS: true,
				minifyJS: true,
				minifyURLs: true,
				noNewlinesBeforeTagClose: true,
				preventAttributesEscaping: true,
				processConditionalComments: true,
				removeAttributeQuotes: true,
				removeComments: true,
				removeEmptyAttributes: true,
				removeOptionalTags: true,
				removeRedundantAttributes: true,
				removeScriptTypeAttributes: true,
				removeStyleLinkTypeAttributes: true,
				sortAttributes: true,
				sortClassName: true,
				trimCustomFragments: true,
				useShortDoctype: true,
			});
		}

		return content;
	});
}
