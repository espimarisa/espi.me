/**
 * @file Configuration file for Eleventy.
 * @see https://www.11ty.dev/docs/config/
 * @license zlib
 */

// @ts-check

import path from "node:path";
import { feedPlugin } from "@11ty/eleventy-plugin-rss";
import externalLinks from "@aloskutov/eleventy-plugin-external-links";
import browserslist from "browserslist";
import { compress } from "eleventy-plugin-compress";
import faviconsPlugin from "eleventy-plugin-gen-favicons";
// @ts-expect-error This dependency does not export itself properly.
import pluginIcons from "eleventy-plugin-icons";
import htmlmin from "html-minifier-next";
import { browserslistToTargets, bundle } from "lightningcss";
import metadata from "./src/_data/metadata.js";

/**
 * Configures Eleventy.
 * @param {(import("@11ty/eleventy/UserConfig").default)} eleventyConfig
 * @see https://www.11ty.dev/docs/config/
 */

export default function (eleventyConfig) {
	// Configures data, input, and output directories.
	eleventyConfig.setInputDirectory("./src");
	eleventyConfig.setOutputDirectory("./_site");
	eleventyConfig.setDataDirectory("_data");
	eleventyConfig.setIncludesDirectory("_includes");
	eleventyConfig.setLayoutsDirectory("_layouts");

	// Copy static files in /public to the root output directory.
	eleventyConfig.addPassthroughCopy({ "./public": "/" });

	// Adds page generation date to the global data.
	eleventyConfig.addGlobalData("generated", () => {
		const now = new Date();
		return new Intl.DateTimeFormat("en-US", {
			dateStyle: "long",
		}).format(now);
	});

	// Adds the repository URL to the global data.
	eleventyConfig.addGlobalData(
		"repository",
		"https://github.com/espimarisa/espi.me/blob/main",
	);

	// Configures the Nunjucks engine.
	eleventyConfig.setNunjucksEnvironmentOptions({
		throwOnUndefined: true,
	});

	// Automatically add external link attributes.
	eleventyConfig.addPlugin(externalLinks);

	// Adds support for icon packs.
	eleventyConfig.addPlugin(pluginIcons);

	// Generate favicons and webmanifest.
	eleventyConfig.addPlugin(faviconsPlugin, {
		manifestData: {
			name: metadata.title,
			theme_color: metadata.theme_color,
		},
	});

	// Generates RSS feeds.
	eleventyConfig.addPlugin(feedPlugin, {
		collection: {
			limit: 10,
			name: "posts",
		},
		metadata: {
			author: {
				email: metadata.author.email,
				name: metadata.author.name,
			},
			base: metadata.absolute_url,
			language: "en",
			subtitle: metadata.journal.subtitle,
			title: metadata.journal.title,
		},
		outputPath: "/feed.xml",
		type: "atom",
	});

	// Automatically compress contents with brotli.
	eleventyConfig.addPlugin(compress, {
		algorithm: "brotli",
		enabled: true,
	});

	// Process CSS with LightningCSS.
	eleventyConfig.addTemplateFormats(["css"]);
	eleventyConfig.addExtension("css", {
		outputFileExtension: "css",

		// Compiles the content.
		compile: (_content, input) => {
			// Configures browserslist targets.
			const targets = browserslistToTargets(
				browserslist("> 0.2% and not dead"),
			);

			// Parses the content; ignore files starting with _.
			const parsed = path.parse(input);
			if (parsed.name.startsWith("_")) {
				return;
			}

			return () => {
				// Bundles the content together.
				const { code } = bundle({
					filename: input,
					minify: true,
					sourceMap: false,
					targets: targets,
				});

				return code;
			};
		},
	});

	// Minifies HTML contents.
	eleventyConfig.addTransform("htmlmin", function (content) {
		// Only minify pages processed as HTML templates.
		if ((this.page.outputPath || "").endsWith(".html")) {
			const minified = htmlmin.minify(content, {
				collapseBooleanAttributes: true,
				collapseInlineTagWhitespace: true,
				collapseWhitespace: true,
				conservativeCollapse: true,
				decodeEntities: true,
				includeAutoGeneratedTags: false,
				minifyCSS: true,
				minifyJS: true,
				minifyURLs: true,
				noNewlinesBeforeTagClose: true,
				preventAttributesEscaping: true,
				processConditionalComments: true,
				removeAttributeQuotes: true,
				removeComments: true,
				removeEmptyAttributes: true,
				removeOptionalTags: true,
				removeRedundantAttributes: true,
				removeScriptTypeAttributes: true,
				removeStyleLinkTypeAttributes: true,
				sortAttributes: true,
				sortClassName: true,
				trimCustomFragments: true,
				useShortDoctype: true,
			});

			return minified;
		}

		return content;
	});
}
